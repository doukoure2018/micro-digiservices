package io.digiservices.ecreditservice.repository.impl;

import io.digiservices.ecreditservice.dto.CompteExploitation;
import io.digiservices.ecreditservice.repository.CompteExploitationRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.JdbcClient;
import org.springframework.stereotype.Service;

import java.time.LocalDate;

import static io.digiservices.ecreditservice.query.EntrepriseQuery.*;


@Service
@RequiredArgsConstructor
@Slf4j
public class CompteExploitationRepositoryImpl implements CompteExploitationRepository {

    private final JdbcClient jdbcClient;
    @Override
    public void saveResultatBrutActuel(CompteExploitation compteExploitation) {
        try {
            MapSqlParameterSource params = new MapSqlParameterSource();
            params.addValue("entrepriseId", compteExploitation.getEntrepriseId());
            params.addValue("dateDebutPeriode", compteExploitation.getDateDebutPeriode());
            params.addValue("dateFinPeriode", compteExploitation.getDateFinPeriode());
            params.addValue("chiffreAffaires", compteExploitation.getChiffreAffaires());
            params.addValue("coutMarchandises", compteExploitation.getCoutMarchandises());

            // Execute the query
            jdbcClient.sql(SAVE_RESULTAT_BRUT_ACTUEL_QUERY)
                    .paramSource(params)
                    .update();

            log.info("Saved actual operation result for enterprise ID: {} for period: {} to {}",
                    compteExploitation.getEntrepriseId(),
                    compteExploitation.getDateDebutPeriode(),
                    compteExploitation.getDateFinPeriode());

        } catch (Exception e) {
            log.error("Error saving actual operation result: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to save actual operation result", e);
        }
    }

    @Override
    public void saveResultatBrutPrevisionnel(CompteExploitation compteExploitation) {
        try {
            MapSqlParameterSource params = new MapSqlParameterSource();
            params.addValue("entrepriseId", compteExploitation.getEntrepriseId());
            params.addValue("dateDebutPeriode", compteExploitation.getDateDebutPeriode());
            params.addValue("dateFinPeriode", compteExploitation.getDateFinPeriode());
            params.addValue("chiffreAffaires", compteExploitation.getChiffreAffaires());
            params.addValue("coutMarchandises", compteExploitation.getCoutMarchandises());

            // Execute the query
            jdbcClient.sql(SAVE_RESULTAT_BRUT_PREVISIONNEL_QUERY)
                    .paramSource(params)
                    .update();

            log.info("Saved provisional operation result for enterprise ID: {} for period: {} to {}",
                    compteExploitation.getEntrepriseId(),
                    compteExploitation.getDateDebutPeriode(),
                    compteExploitation.getDateFinPeriode());

        } catch (Exception e) {
            log.error("Error saving provisional operation result: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to save provisional operation result", e);
        }
    }


    @Override
    public void updateCompteExploitationActuel(Long entrepriseId, LocalDate dateFinPeriode, CompteExploitation compteExploitation) {

        try {
            MapSqlParameterSource params = new MapSqlParameterSource();
            params.addValue("entrepriseId", entrepriseId);
            params.addValue("dateFinPeriode", dateFinPeriode);
            params.addValue("coutMarchandises", compteExploitation.getCoutMarchandises());
            params.addValue("coutTransportProduction", compteExploitation.getCoutTransportProduction());
            params.addValue("fraisTransportPersonnel", compteExploitation.getFraisTransportPersonnel());
            params.addValue("fraisManutention", compteExploitation.getFraisManutention());
            params.addValue("montantAideExterne", compteExploitation.getMontantAideExterne());
            params.addValue("fraisHebergementRestauration", compteExploitation.getFraisHebergementRestauration());
            params.addValue("impots", compteExploitation.getImpots());
            params.addValue("loyers", compteExploitation.getLoyers());

            // Execute the update query
            int updatedRows = jdbcClient.sql(UPDATE_COMPTE_EXPLOITATION_ACTUEL_QUERY)
                    .paramSource(params)
                    .update();

            if (updatedRows == 0) {
                log.warn("No compte exploitation record found to update for enterprise ID: {} and end date: {}",
                        entrepriseId, dateFinPeriode);
                throw new RuntimeException("No compte exploitation record found to update");
            }

            log.info("Updated actual operation expenses for enterprise ID: {} for period ending: {}",
                    entrepriseId, dateFinPeriode);

        } catch (Exception e) {
            log.error("Error updating actual operation expenses: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to update actual operation expenses", e);
        }
    }


    @Override
    public void updateCompteExploitationPrevisionnel(Long entrepriseId,LocalDate dateFinPeriode, CompteExploitation compteExploitation) {

        try {
            // Create parameter source for the query
            MapSqlParameterSource params = new MapSqlParameterSource();
            params.addValue("entrepriseId", entrepriseId);
            params.addValue("dateFinPeriode", dateFinPeriode);
            params.addValue("coutMarchandises", compteExploitation.getCoutMarchandises());
            params.addValue("coutTransportProduction", compteExploitation.getCoutTransportProduction());
            params.addValue("fraisTransportPersonnel", compteExploitation.getFraisTransportPersonnel());
            params.addValue("fraisManutention", compteExploitation.getFraisManutention());
            params.addValue("montantAideExterne", compteExploitation.getMontantAideExterne());
            params.addValue("fraisHebergementRestauration", compteExploitation.getFraisHebergementRestauration());
            params.addValue("impots", compteExploitation.getImpots());
            params.addValue("loyers", compteExploitation.getLoyers());

            // Execute the update query
            int updatedRows = jdbcClient.sql(UPDATE_COMPTE_EXPLOITATION_PREVISIONNEL_QUERY)
                    .paramSource(params)
                    .update();

            if (updatedRows == 0) {
                log.warn("No provisional compte exploitation record found to update for enterprise ID: {} and end date: {}",
                        entrepriseId, dateFinPeriode);
                throw new RuntimeException("No provisional compte exploitation record found to update");
            }

            log.info("Updated provisional operation expenses for enterprise ID: {} for period ending: {}",
                    entrepriseId, dateFinPeriode);

        } catch (Exception e) {
            log.error("Error updating provisional operation expenses: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to update provisional operation expenses", e);
        }
    }
}
