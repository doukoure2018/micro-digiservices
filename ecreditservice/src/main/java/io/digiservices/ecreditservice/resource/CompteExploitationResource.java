package io.digiservices.ecreditservice.resource;

import io.digiservices.ecreditservice.domain.Response;
import io.digiservices.ecreditservice.dto.CompteExploitation;
import io.digiservices.ecreditservice.service.CompteExploitationService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.AllArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.Map;

import static io.digiservices.ecreditservice.utils.RequestUtils.getResponse;
import static org.springframework.http.HttpStatus.CREATED;
import static org.springframework.http.HttpStatus.OK;
import static org.springframework.http.ResponseEntity.created;

@RestController
@AllArgsConstructor
@RequestMapping("/ecredit")
public class CompteExploitationResource {

    private final CompteExploitationService compteExploitationService;

    @PostMapping("/addResultatBrutActuel")
    public ResponseEntity<Response> saveResultatBrutActuel(@RequestBody CompteExploitation compteExploitation, HttpServletRequest request) {
        compteExploitation.setEstPrevisionnel(false);

        compteExploitationService.saveResultatBrutActuel(compteExploitation);

        return created(getUri()).body(
                getResponse(request, Map.of("success", true), "Résultat brut actuel enregistré avec succès", CREATED)
        );
    }

    @PostMapping("/addResultatBrutPrevisionnel")
    public ResponseEntity<Response> saveResultatBrutPrevisionnel(@RequestBody CompteExploitation compteExploitation, HttpServletRequest request) {
        compteExploitation.setEstPrevisionnel(true);

        compteExploitationService.saveResultatBrutPrevisionnel(compteExploitation);

        return created(getUri()).body(
                getResponse(request, Map.of("success", true), "Résultat brut prévisionnel enregistré avec succès", CREATED)
        );
    }


    @PutMapping("/updateChargesActuelles")
    public ResponseEntity<Response> updateCompteExploitationActuel(@RequestBody CompteExploitation compteExploitation, HttpServletRequest request) {
        compteExploitationService.updateCompteExploitationActuel(
                compteExploitation.getEntrepriseId(),
                compteExploitation.getDateFinPeriode(),
                compteExploitation
        );
        return ResponseEntity.ok(
                getResponse(request, Map.of("success", true), "Charges d'exploitation actuelles mises à jour avec succès", OK)
        );
    }

    @PutMapping("/updateChargesPrevisionnelles")
    public ResponseEntity<Response> updateCompteExploitationPrevisionnel(@RequestBody CompteExploitation compteExploitation, HttpServletRequest request) {
        compteExploitationService.updateCompteExploitationPrevisionnel(
                compteExploitation.getEntrepriseId(),
                compteExploitation.getDateFinPeriode(),
                compteExploitation
        );
        return ResponseEntity.ok(
                getResponse(request, Map.of("success", true), "Charges d'exploitation prévisionnelles mises à jour avec succès", OK)
        );
    }



    private URI getUri() {
        return URI.create("/exploitation/compteexploitationId");
    }
}
