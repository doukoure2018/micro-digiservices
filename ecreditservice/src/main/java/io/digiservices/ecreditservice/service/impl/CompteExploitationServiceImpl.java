package io.digiservices.ecreditservice.service.impl;

import io.digiservices.ecreditservice.dto.CompteExploitation;
import io.digiservices.ecreditservice.repository.CompteExploitationRepository;
import io.digiservices.ecreditservice.repository.EntrepriseRepository;
import io.digiservices.ecreditservice.service.CompteExploitationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDate;

@Service
@RequiredArgsConstructor
@Slf4j
public class CompteExploitationServiceImpl implements CompteExploitationService {
    private final CompteExploitationRepository compteExploitationRepository;
    private final EntrepriseRepository entrepriseRepository;
    @Override
    public void saveResultatBrutActuel(CompteExploitation compteExploitation) {
        // Verify the enterprise exists
        if (!entrepriseRepository.existsById(compteExploitation.getEntrepriseId())) {
            throw new RuntimeException("Enterprise with ID " + compteExploitation.getEntrepriseId() + " not found");
        }

        // Verify the dates are valid
        if (compteExploitation.getDateFinPeriode().isBefore(compteExploitation.getDateDebutPeriode())) {
            throw new IllegalArgumentException("End date cannot be before start date");
        }

        // Save the actual operating result with values from the request
        compteExploitationRepository.saveResultatBrutActuel(compteExploitation);
        log.info("Saved actual operating result for enterprise ID: {}", compteExploitation.getEntrepriseId());
    }

    @Override
    public void saveResultatBrutPrevisionnel(CompteExploitation compteExploitation) {
        // Verify the enterprise exists
        if (!entrepriseRepository.existsById(compteExploitation.getEntrepriseId())) {
            throw new RuntimeException("Enterprise with ID " + compteExploitation.getEntrepriseId() + " not found");
        }

        // Verify the dates are valid
        if (compteExploitation.getDateFinPeriode().isBefore(compteExploitation.getDateDebutPeriode())) {
            throw new IllegalArgumentException("End date cannot be before start date");
        }

        // Save the provisional operating result with values from the request
        compteExploitationRepository.saveResultatBrutPrevisionnel(compteExploitation);
        log.info("Saved provisional operating result for enterprise ID: {}", compteExploitation.getEntrepriseId());
    }

    @Override
    public void updateCompteExploitationActuel(Long entrepriseId, LocalDate dateFinPeriode, CompteExploitation compteExploitation) {
        compteExploitationRepository.updateCompteExploitationActuel(entrepriseId, dateFinPeriode, compteExploitation);
    }

    @Override
    public void updateCompteExploitationPrevisionnel(Long entrepriseId, LocalDate dateFinPeriode, CompteExploitation compteExploitation) {
       compteExploitationRepository.updateCompteExploitationPrevisionnel(entrepriseId, dateFinPeriode, compteExploitation);
    }
}
