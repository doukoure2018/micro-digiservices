package io.digiservices.ebanking.repository;


import io.digiservices.ebanking.entity.Compte;
import io.digiservices.ebanking.paylaod.ComptePKId;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface CompteRepository extends JpaRepository<Compte, ComptePKId> {

    List<Compte> findAllByCodClientes(String codClientes);

    Compte findByComptePKIdNumCuenta(String numCuenta);

    Compte findByCodClientesAndCodCategoriaAndCodProducto(String codClientes, String codCategoria, String codProducto);


//    @Query(value = "SELECT CC.CC_CUENTA_EFECTIVO.COD_EMPRESA, CC.CC_CUENTA_EFECTIVO.NUM_CUENTA, CC.CC_CUENTA_EFECTIVO.COD_AGENCIA, \n" +
//            "CC.CC_CUENTA_EFECTIVO.COD_CATEGORIA, CC.CC_CUENTA_EFECTIVO.COD_SISTEMA, \n" +
//            "CC.CC_CUENTA_EFECTIVO.COD_PRODUCTO, CC.CC_CUENTA_EFECTIVO.COD_CLIENTE, CC.CC_CUENTA_EFECTIVO.COD_DIRECCION, \n" +
//            "CC.CC_CUENTA_EFECTIVO.IND_ESTADO, CC.CC_CUENTA_EFECTIVO.COD_ESTADO, CC.CC_CUENTA_EFECTIVO.FEC_ESTADO, \n" +
//            "CC.CC_CUENTA_EFECTIVO.FEC_APERTURA, CC.CC_CUENTA_EFECTIVO.FEC_INI_SOBGRO, CC.CC_CUENTA_EFECTIVO.FEC_ULT_ACT_INT,\n" +
//            "CC.CC_CUENTA_EFECTIVO.FEC_ULT_CAP_INT, CC.CC_CUENTA_EFECTIVO.NOM_CHEQUERA, \n" +
//            "CC.CC_CUENTA_EFECTIVO.IND_TIP_CARGOS, CC.CC_CUENTA_EFECTIVO.IND_CTA_ALTERNA, \n" +
//            "CC.CC_CUENTA_EFECTIVO.IND_PAG_INTERES, CC.CC_CUENTA_EFECTIVO.SAL_DISPONIBLE, \n" +
//            "CC.CC_CUENTA_EFECTIVO.SAL_RESERVA, CC.CC_CUENTA_EFECTIVO.SAL_TRANSITO, CC.CC_CUENTA_EFECTIVO.SAL_CONSULTADO,\n" +
//            "CC.CC_CUENTA_EFECTIVO.SAL_CONGELADO, CC.CC_CUENTA_EFECTIVO.SAL_PROMEDIO, CC.CC_CUENTA_EFECTIVO.SAL_ULT_CORTE,\n" +
//            "CC.CC_CUENTA_EFECTIVO.MON_RESERVA_UTL, CC.CC_CUENTA_EFECTIVO.MON_SOBGRO_AUT, CC.CC_CUENTA_EFECTIVO.MON_SOB_NO_AUT, \n" +
//            "CC.CC_CUENTA_EFECTIVO.MON_SOBGRO_DISP, CC.CC_CUENTA_EFECTIVO.MON_TOTAL_CARGO, CC.CC_CUENTA_EFECTIVO.INT_CAP_CONGELA, \n" +
//            "CC.CC_CUENTA_EFECTIVO.INT_CAP_RESERVA, CC.CC_CUENTA_EFECTIVO.INT_POR_PAGAR, CC.CC_CUENTA_EFECTIVO.INT_SOBGRO_AUT, \n" +
//            "CC.CC_CUENTA_EFECTIVO.INT_RESERVA_UTL, CC.CC_CUENTA_EFECTIVO.IND_SOBGRO, CC.CC_CUENTA_EFECTIVO.NUM_CTA_RELACIONADA, \n" +
//            "CC.CC_CUENTA_EFECTIVO.INT_MES_ACTUAL, CC.CC_CUENTA_EFECTIVO.IND_CORRESPONDENCIA, CC.CC_CUENTA_EFECTIVO.FEC_ULT_MOVIMIENTO, \n" +
//            "CC.CC_CUENTA_EFECTIVO.COD_MONEDA, CC.CC_CUENTA_EFECTIVO.OBS_ESTADO_CUENTA, '' as dsc_direccion, CC.CC_CUENTA_EFECTIVO.MON_MAX_SOBGRO_TEMP, \n" +
//            "CL.CL_DIR_CLIENTES.DET_DIRECCION, CC.CC_CUENTA_EFECTIVO.COD_USUARIO,\n" +
//            "CC.CC_CUENTA_EFECTIVO.COD_ASOCIACION, CC.CC_CUENTA_EFECTIVO.COD_GRUPO_SOL,\n" +
//            "ISNULL((SELECT SUM(ISNULL(AUT.MON_AUTORIZADO - AUT.MON_UTILIZADO,0))\n" +
//            "FROM CC.CC_AUTORI_X_CUENTA AUT\n" +
//            "WHERE AUT.COD_EMPRESA = CC.CC_CUENTA_EFECTIVO.COD_EMPRESA\n" +
//            "AND AUT.NUM_CUENTA = CC.CC_CUENTA_EFECTIVO.NUM_CUENTA\n" +
//            "AND AUT.IND_ESTADO = 'A'\n" +
//            "),0) as MON_NO_UTILIZADO,\n" +
//            "ISNULL((SELECT SUM(ISNULL(AUT.MON_COMISION,0))\n" +
//            "FROM CC.CC_AUTORI_X_CUENTA AUT\n" +
//            "WHERE AUT.COD_EMPRESA = CC.CC_CUENTA_EFECTIVO.COD_EMPRESA\n" +
//            "AND AUT.NUM_CUENTA = CC.CC_CUENTA_EFECTIVO.NUM_CUENTA\n" +
//            "),0) as MON_COMISION, CC.CC_CUENTA_EFECTIVO.NUM_CUENTA_MIG\n" +
//            "FROM CC.CC_CUENTA_EFECTIVO, CL.CL_DIR_CLIENTES \n" +
//            "WHERE ( CL.CL_DIR_CLIENTES.COD_EMPRESA = CC.CC_CUENTA_EFECTIVO.COD_EMPRESA ) \n" +
//            "and ( CL.CL_DIR_CLIENTES.COD_CLIENTE = CC.CC_CUENTA_EFECTIVO.COD_CLIENTE )\n" +
//            "and ( CL.CL_DIR_CLIENTES.COD_DIRECCION = CC.CC_CUENTA_EFECTIVO.COD_DIRECCION ) \n" +
//            "and ( ( CC.CC_CUENTA_EFECTIVO.COD_EMPRESA =:codEmpresa )\n" +
//            "AND ( CC.CC_CUENTA_EFECTIVO.NUM_CUENTA =:numCuenta ) )", nativeQuery = true)
//    List<Object> getInstanceCompte(String codEmpresa, String numCuenta);


//    @Query(value = "SELECT  CJ.CJ_TRAN_DIARIO_ENCA.COD_EMPRESA ,   CJ.CJ_TRAN_DIARIO_ENCA.COD_AGENCIA , CJ.CJ_TRAN_DIARIO_ENCA.NUM_SECUENCIA_DOC ,          \n" +
//            "CJ.CJ_TRAN_DIARIO_ENCA.COD_CAJERO ,           CJ.CJ_TRAN_DIARIO_ENCA.COD_MONEDA_ORIGEN ,CJ.CJ_TRAN_DIARIO_ENCA.COD_CLIENTE ,           CJ.CJ_TRAN_DIARIO_ENCA.TIP_TRANSACCION ,           CJ.CJ_TRAN_DIARIO_ENCA.FEC_TRANSACCION ,           CJ.CJ_TRAN_DIARIO_ENCA.MTO_MOVIMIENTO ,           \n" +
//            "CJ.CJ_TRAN_DIARIO_ENCA.MTO_EFECTIVO ,           CJ.CJ_TRAN_DIARIO_ENCA.MTO_DOCUMENTO ,CJ.CJ_TRAN_DIARIO_ENCA.MTO_VUELTO ,CJ.CJ_TRAN_DIARIO_ENCA.MTO_COMISION \n" +
//            ",           SG.SG_USUARIOS.NOM_USUARIO ,           CF.CF_CATAL_TRANSACCIONES.DES_TRANSACCION ,CJ.CJ_TRAN_DIARIO_ENCA.NUM_MOV_ENTE ,           \n" +
//            "CJ.CJ_TRAN_DIARIO_ENCA.IND_ESTADO ,           CL.CL_CLIENTES.NOM_CLIENTE     FROM CJ.CJ_TRAN_DIARIO_ENCA ,SG.SG_USUARIOS ,           CF.CF_CATAL_TRANSACCIONES \n" +
//            ",           CL.CL_CLIENTES     WHERE ( SG.SG_USUARIOS.COD_EMPRESA = CJ.CJ_TRAN_DIARIO_ENCA.COD_EMPRESA ) and          ( SG.SG_USUARIOS.COD_AGENCIA = \n" +
//            "CJ.CJ_TRAN_DIARIO_ENCA.COD_AGENCIA ) and          ( SG.SG_USUARIOS.COD_USUARIO = CJ.CJ_TRAN_DIARIO_ENCA.COD_CAJERO ) and          ( CJ.CJ_TRAN_DIARIO_ENCA.COD_SISTEMA = \n" +
//            "CF.CF_CATAL_TRANSACCIONES.COD_SISTEMA ) and          ( CJ.CJ_TRAN_DIARIO_ENCA.TIP_TRANSACCION = CF.CF_CATAL_TRANSACCIONES.TIP_TRANSACCION ) and          ( \n" +
//            "CL.CL_CLIENTES.COD_EMPRESA = CJ.CJ_TRAN_DIARIO_ENCA.COD_EMPRESA ) and          ( CL.CL_CLIENTES.COD_CLIENTE = CJ.CJ_TRAN_DIARIO_ENCA.COD_CLIENTE ) and          ( ( \n" +
//            "CJ.CJ_TRAN_DIARIO_ENCA.COD_EMPRESA = '00000' ) and          ( CJ.CJ_TRAN_DIARIO_ENCA.COD_AGENCIA =:codAgencia ) and          ( CJ.CJ_TRAN_DIARIO_ENCA.COD_CAJERO like :codUsarios ) \n" +
//            "and          ( CJ.CJ_TRAN_DIARIO_ENCA.TIP_TRANSACCION like '%' ) and          ( CJ.CJ_TRAN_DIARIO_ENCA.COD_MONEDA_ORIGEN like '4' ) and          ( \n" +
//            "CJ.CJ_TRAN_DIARIO_ENCA.FEC_TRANSACCION >=  :fec_transaction  ) and          ( CJ.CJ_TRAN_DIARIO_ENCA.FEC_TRANSACCION <  :fec_transaction  ) and          ( \n" +
//            "CJ.CJ_TRAN_DIARIO_ENCA.IND_ESTADO like 'A' ) )     UNION    SELECT CJ.CJ_TRAN_MENSUAL_ENCA.COD_EMPRESA ,           CJ.CJ_TRAN_MENSUAL_ENCA.COD_AGENCIA ,           \n" +
//            "CJ.CJ_TRAN_MENSUAL_ENCA.NUM_SECUENCIA_DOC ,           CJ.CJ_TRAN_MENSUAL_ENCA.COD_CAJERO ,           CJ.CJ_TRAN_MENSUAL_ENCA.COD_MONEDA_ORIGEN ,           \n" +
//            "CJ.CJ_TRAN_MENSUAL_ENCA.COD_CLIENTE ,           CJ.CJ_TRAN_MENSUAL_ENCA.TIP_TRANSACCION ,           CJ.CJ_TRAN_MENSUAL_ENCA.FEC_TRANSACCION ,        \n" +
//            "CJ.CJ_TRAN_MENSUAL_ENCA.MTO_MOVIMIENTO ,           CJ.CJ_TRAN_MENSUAL_ENCA.MTO_EFECTIVO ,           CJ.CJ_TRAN_MENSUAL_ENCA.MTO_DOCUMENTO ,         \n" +
//            "CJ.CJ_TRAN_MENSUAL_ENCA.MTO_VUELTO ,           CJ.CJ_TRAN_MENSUAL_ENCA.MTO_COMISION ,           SG.SG_USUARIOS.NOM_USUARIO ,       \n" +
//            "CF.CF_CATAL_TRANSACCIONES.DES_TRANSACCION ,           CJ.CJ_TRAN_MENSUAL_ENCA.NUM_MOV_ENTE ,           CJ.CJ_TRAN_MENSUAL_ENCA.IND_ESTADO , \n" +
//            "CL.CL_CLIENTES.NOM_CLIENTE      FROM CF.CF_CATAL_TRANSACCIONES ,           CJ.CJ_TRAN_MENSUAL_ENCA ,           SG.SG_USUARIOS ,  \n" +
//            "CL.CL_CLIENTES     WHERE ( CF.CF_CATAL_TRANSACCIONES.COD_SISTEMA = CJ.CJ_TRAN_MENSUAL_ENCA.COD_SISTEMA ) and       \n" +
//            "( SG.SG_USUARIOS.COD_EMPRESA = CJ.CJ_TRAN_MENSUAL_ENCA.COD_EMPRESA ) and       \n" +
//            "( SG.SG_USUARIOS.COD_AGENCIA = CJ.CJ_TRAN_MENSUAL_ENCA.COD_AGENCIA ) and       \n" +
//            "( SG.SG_USUARIOS.COD_USUARIO = CJ.CJ_TRAN_MENSUAL_ENCA.COD_CAJERO ) and        \n" +
//            "( CJ.CJ_TRAN_MENSUAL_ENCA.TIP_TRANSACCION = CF.CF_CATAL_TRANSACCIONES.TIP_TRANSACCION ) and      \n" +
//            "( CL.CL_CLIENTES.COD_EMPRESA = CJ.CJ_TRAN_MENSUAL_ENCA.COD_EMPRESA ) and       \n" +
//            "( CL.CL_CLIENTES.COD_CLIENTE = CJ.CJ_TRAN_MENSUAL_ENCA.COD_CLIENTE ) and         \n" +
//            "( ( CJ.CJ_TRAN_MENSUAL_ENCA.COD_EMPRESA = '00000' ) and          ( CJ.CJ_TRAN_MENSUAL_ENCA.COD_AGENCIA =:codAgencia ) and       \n" +
//            "( CJ.CJ_TRAN_MENSUAL_ENCA.COD_CAJERO like :codUsarios ) and          ( CJ.CJ_TRAN_MENSUAL_ENCA.TIP_TRANSACCION like '%' ) and          ( CJ.CJ_TRAN_MENSUAL_ENCA.COD_MONEDA_ORIGEN like '4' ) and          ( CJ.CJ_TRAN_MENSUAL_ENCA.FEC_TRANSACCION >= :fec_transaction  ) and        \n" +
//            "( CJ.CJ_TRAN_MENSUAL_ENCA.FEC_TRANSACCION <  :fec_transaction  ) and        \n" +
//            "( CJ.CJ_TRAN_MENSUAL_ENCA.IND_ESTADO like 'A' ) )", nativeQuery = true)
//    List<Object> getAllTransaction(LocalDateTime fec_transaction, String codAgencia, String codUsarios);


    boolean existsCompteByCodClientesAndCodProducto(String codClientes, String codProducto);


    Compte findByCodClientesAndCodProducto(String codClientes, String codProducto);
}
